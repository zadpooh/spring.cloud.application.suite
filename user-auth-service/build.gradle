buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	ext {
		queryDslVersion="5.0.0"
		springCloudVersion="2022.0.3"
	}
}

plugins {
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//redis
	//implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16'
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
	//querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	// kafka
//	implementation 'org.springframework.kafka:spring-kafka'

	implementation "javax.annotation:javax.annotation-api:1.3.2"
	compile "javax.annotation:javax.annotation-api:1.3.2"
	implementation "javax.servlet:javax.servlet-api:4.0.1"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

}

tasks.named('test') {
	useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

